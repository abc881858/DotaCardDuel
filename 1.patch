Index: card.cpp
===================================================================
--- card.cpp	(版本 49)
+++ card.cpp	(工作副本)
@@ -463,7 +463,7 @@
     {
         if (currentflag == Selectable)
         {
-            activePicked();
+            emit pickTarget();
         }
         else if (currentflag == Effect)
         {
Index: card.h
===================================================================
--- card.h	(版本 47)
+++ card.h	(工作副本)
@@ -168,7 +168,6 @@
     virtual bool testEffect() { return false; }
     virtual void activeEffect() {}
     virtual void activeHandEffect() {}
-    void activePicked();
 
     bool getChangePosition() const;
     void setChangePosition(bool value); //area闇€瑕?@@ -231,6 +230,7 @@
     void normalSummon();
     void setCard();
     void tribute();
+    void pickTarget();
 };
 
 Q_DECLARE_OPERATORS_FOR_FLAGS(Card::CardFlags)
Index: cardeffect.cpp
===================================================================
--- cardeffect.cpp	(版本 49)
+++ cardeffect.cpp	(工作副本)
@@ -9,76 +9,17 @@
 #include "net.h"
 #include "rule.h"
 
-void Card::activePicked() //娉ㄦ剰锛氳繖鏄綘閫夋嫨鐨勫崱锛屼笉鏄彂鍔ㄦ晥鏋滅殑鍗★紒閫夊ソ浜嗗崱鐗岋紝鐪熸active锛屽苟鍙戦€丯et
+void RoomScene::response_AttackEffect(QJsonObject jsonObject) //鏀跺埌Net娑堟伅鐨勫绔仛鍑哄弽搴? {
-    bool oldFace = face;
-    int oldArea = area;
-    bool oldStand = stand;
-    int oldIndex = index;
-
-    int pickRequirement = Rule::instance()->getPickRequirement();
-    qDebug() << "Card::activePicked() pickRequirement: " << pickRequirement;
-
-    if (pickRequirement == AttackedRequirement)
-    {
-        //
-    }
-    else if (pickRequirement == KeeperoftheLightRequirement)
-    {
-        //缁欓€夋嫨鐨勫鏂瑰崱鐗屼竴涓猟ebuff
-        setDebuff(KeeperoftheLightRequirement);
-    }
-    else if (pickRequirement == KeeperoftheLightRequiremented)
-    {
-        //涓€鑸彧鏈夊姩瀵规柟鍦哄湴鐨勪笢瑗匡紝鎵嶄細瑙﹀彂Net鐩稿叧鐨勪簨浠?-        //濡傛灉鍙姩鑷繁鍦哄湴锛屽洜涓烘湰鍦扮殑add鍜宼ake鍗＄墝閮藉仛浜哊et鍙戝皠锛屾墍浠ュ彲浠ヨ烦杩囥€?-        HandArea::instance()->addCard(FieldyardArea::instance()->takeCard(index));
-    }
-    else if (pickRequirement == LionRequirement)
-    {
-        if (face)
-        {
-            setFace(false);
-            setArea(EnemyFieldyard_Area);
-            setStand(false);
-        }
-        else
-        {
-            //涓嶅簲璇ュ幓鎿嶄綔浠讳綍 EnemyArea 鐨?addCard 鍜宼akeCard锛屽洜涓鸿繖浼氳Е鍙戝鏂瑰啀娆″彂閫佺粰鎴慳dd鍜宼ake锛岃浣忥紒
-            //EnemyGraveyardArea::instance()->response_addCard(EnemyFieldyardArea::instance()->response_takeCard(index));
-        }
-    }
-
-    QJsonObject parameter;
-    parameter.insert("oldFace", oldFace);
-    parameter.insert("oldArea", oldArea); //鐐瑰嚮鐨勫崱鐨勬棫浣嶇疆
-    parameter.insert("oldStand", oldStand);
-    parameter.insert("oldIndex", oldIndex);
-    parameter.insert("newFace", face);
-    parameter.insert("newArea", area); //鐐瑰嚮鐨勫崱鐨勬柊浣嶇疆
-    parameter.insert("newStand", stand);
-    parameter.insert("newIndex", index);
-    QJsonObject object;
-    QString request = QString(Rule::instance()->NameEffected[pickRequirement]).append("Effect");
-    qDebug() << "I have actived some card's effect! The effect is : " << request;
-    object.insert("request", request);
-    object.insert("parameter", parameter);
-    Net::instance()->write(object);
-
-    Rule::instance()->setPickRequirement(NoRequiremente);
-}
-
-void RoomScene::response_AttackEffect(QJsonObject jsonObject)
-{
     QJsonObject parameter = jsonObject["parameter"].toObject();
     int oldIndex = parameter["oldIndex"].toInt();
     //zhao gu fa qi fang de DONGHUA!
-    QPropertyAnimation* animation = new QPropertyAnimation(sword[currentMove], "pos");
-    animation->setDuration(1000);
-//    animation->setStartValue(sword[currentMove].pos());
-    animation->setEndValue(QPointF(210, 20));
-    animation->setEasingCurve(QEasingCurve::OutBounce);
-    animation->start();
+//    QPropertyAnimation* animation = new QPropertyAnimation(sword[currentMove], "pos");
+//    animation->setDuration(1000);
+//    //    animation->setStartValue(sword[currentMove].pos());
+//    animation->setEndValue(QPointF(210, 20));
+//    animation->setEasingCurve(QEasingCurve::OutBounce);
+//    animation->start();
 }
 
 void RoomScene::response_CentaurWarrunnerEffect(QJsonObject jsonObject)
Index: roomscene.cpp
===================================================================
--- roomscene.cpp	(版本 49)
+++ roomscene.cpp	(工作副本)
@@ -100,8 +100,17 @@
         sword[i].canClick = true;
         sword[i].hide();
     }
+
     currentMove = -1;
 
+    for (int j = 5; j < 10; j++)
+    {
+        sword[j].setPixmap(QPixmap(":/png/png/sword.png"));
+        sword[j].setPos(QPointF(320 - 80 * (j-5), 0) + EnemyFieldyardPos);
+        addItem(&sword[j]);
+        sword[j].hide();
+    }
+
     duifangxingdong = new GraphicsPixmapObject;
     duifangxingdong->setPixmap(QPixmap(":/png/png/dfxd"));
     addItem(duifangxingdong);
@@ -132,6 +141,72 @@
     connect(Net::instance(), SIGNAL(request_ZeusEffect(QJsonObject)), this, SLOT(response_ZeusEffect(QJsonObject)));
 }
 
+void RoomScene::doPickTarget() //娉ㄦ剰锛氳繖鏄綘閫夋嫨鐨勫崱锛屼笉鏄彂鍔ㄦ晥鏋滅殑鍗★紒閫夊ソ浜嗗崱鐗岋紝鐪熸active锛屽苟鍙戦€丯et
+{
+    Card *card = qobject_cast<Card *>(sender());
+    bool oldFace = card->getFace();
+    int oldArea = card->getArea();
+    bool oldStand = card->getStand();
+    int oldIndex = card->getIndex();
+
+    int pickRequirement = Rule::instance()->getPickRequirement();
+    qDebug() << "Card::doPickTarget() pickRequirement: " << pickRequirement;
+
+    if (pickRequirement == AttackedRequirement)
+    {
+        QPropertyAnimation* animation = new QPropertyAnimation(&sword[currentMove], "pos");
+        animation->setDuration(1000);
+        animation->setStartValue(sword[currentMove].pos());
+        animation->setEndValue(sword[10-oldIndex].pos());
+        animation->setEasingCurve(QEasingCurve::InBack);
+        animation->start();
+    }
+    else if (pickRequirement == KeeperoftheLightRequirement)
+    {
+        //缁欓€夋嫨鐨勫鏂瑰崱鐗屼竴涓猟ebuff
+        card->setDebuff(KeeperoftheLightRequirement);
+    }
+    else if (pickRequirement == KeeperoftheLightRequiremented)
+    {
+        //涓€鑸彧鏈夊姩瀵规柟鍦哄湴鐨勪笢瑗匡紝鎵嶄細瑙﹀彂Net鐩稿叧鐨勪簨浠?+        //濡傛灉鍙姩鑷繁鍦哄湴锛屽洜涓烘湰鍦扮殑add鍜宼ake鍗＄墝閮藉仛浜哊et鍙戝皠锛屾墍浠ュ彲浠ヨ烦杩囥€?+        HandArea::instance()->addCard(FieldyardArea::instance()->takeCard(oldIndex));
+    }
+    else if (pickRequirement == LionRequirement)
+    {
+        if (oldFace)
+        {
+            card->setFace(false);
+            card->setArea(EnemyFieldyard_Area);
+            card->setStand(false);
+        }
+        else
+        {
+            //涓嶅簲璇ュ幓鎿嶄綔浠讳綍 EnemyArea 鐨?addCard 鍜宼akeCard锛屽洜涓鸿繖浼氳Е鍙戝鏂瑰啀娆″彂閫佺粰鎴慳dd鍜宼ake锛岃浣忥紒
+            //EnemyGraveyardArea::instance()->response_addCard(EnemyFieldyardArea::instance()->response_takeCard(index));
+        }
+    }
+
+    QJsonObject parameter;
+    parameter.insert("oldFace", oldFace);
+    parameter.insert("oldArea", oldArea); //鐐瑰嚮鐨勫崱鐨勬棫浣嶇疆
+    parameter.insert("oldStand", oldStand);
+    parameter.insert("oldIndex", oldIndex);
+    parameter.insert("newFace", card->getFace());
+    parameter.insert("newArea", card->getArea()); //鐐瑰嚮鐨勫崱鐨勬柊浣嶇疆
+    parameter.insert("newStand", card->getStand());
+    parameter.insert("newIndex", card->getIndex());
+    QJsonObject object;
+    QString request = QString(Rule::instance()->NameEffected[pickRequirement]).append("Effect");
+    qDebug() << "I have actived some card's effect! The effect is : " << request;
+    object.insert("request", request);
+    object.insert("parameter", parameter);
+    Net::instance()->write(object);
+
+    Rule::instance()->setPickRequirement(NoRequiremente);
+
+}
+
 void RoomScene::mouseMoveEvent(QGraphicsSceneMouseEvent* event)
 {
     QGraphicsScene::mouseMoveEvent(event);
@@ -253,9 +328,19 @@
 {
     int phase = jsonObject["phase"].toInt();
     Rule::instance()->setPhase(phase + 6);
-    if(phase == Rule::myBP)
+    if(phase == 3)
     {
-        //
+        //TODO: 1.鏄惁鍙敤鍦╯etPhase::MyBP鐨勬椂鍊欏姞杞斤紵
+        //2.灏辩畻鍦ㄨ繖鍔犺浇锛屼篃涓嶄竴瀹氳鍏ㄩ儴鏄剧ず涓哄疂鍓戝惂锛?+        for (Card* card : EnemyFieldyardArea::instance()->getYourFieldyard())
+        {
+            if (card->getFace() && card->getStand())
+            {
+                //Fieldyard 鐨刬ndex鏄粠1-5鐨? 瀵瑰簲鐨剆word鏁扮粍涓嬫爣鏄?-4
+                //EnemyFieldyard 鐨刬ndex鏄粠 1-5, 瀵瑰簲鐨剆word鏁扮粍涓嬫爣鏄?-5
+                sword[5 + card->getIndex()].show();
+            }
+        }
     }
 }
 
@@ -312,6 +397,7 @@
                 FieldyardArea::instance()->takeCard(card->getIndex());
                 GraveyardArea::instance()->addCard(card);
             });
+        connect(card, SIGNAL(pickTarget()), this, SLOT(doPickTarget()));
     }
     file.close();
 
@@ -427,8 +513,6 @@
 
     if (phase == Rule::myBP)
     {
-        //TODO: 1.鏄惁鍙敤鍦╯etPhase::MyBP鐨勬椂鍊欏姞杞斤紵
-        //2.灏辩畻鍦ㄨ繖鍔犺浇锛屼篃涓嶄竴瀹氳鍏ㄩ儴鏄剧ず涓哄疂鍓戝惂锛?         for (Card* card : FieldyardArea::instance()->getMyFieldyard())
         {
             if (card->getFace() && card->getStand())
Index: roomscene.h
===================================================================
--- roomscene.h	(版本 49)
+++ roomscene.h	(工作副本)
@@ -15,11 +15,13 @@
 public:
     explicit RoomScene(QObject* parent = 0);
     Card* enemyTakedCard;
-    GraphicsPixmapObject sword[5];
+    GraphicsPixmapObject sword[10];
     GraphicsPixmapObject* duifangxingdong;
     //    GraphicsPixmapObject currentSword;
     int currentMove;
 
+    void doPickTarget();
+
 private:
     //    QMenu* myContextMenu;
     //    QAction* goBP;
