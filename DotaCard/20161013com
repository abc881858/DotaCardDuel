Index: area.h
===================================================================
--- area.h	(版本 34)
+++ area.h	(工作副本)
@@ -2,7 +2,6 @@
 #define AREA_H
 
 #include <QGraphicsObject>
-
 #include "card.h"
 
 class DeckArea : public QGraphicsObject
Index: card.cpp
===================================================================
--- card.cpp	(版本 35)
+++ card.cpp	(工作副本)
@@ -1,10 +1,8 @@
 #include "card.h"
-#include "net.h"
 #include "rule.h"
 #include <QGraphicsSceneMouseEvent>
-#include <QMatrix>
-#include <QMetaObject>
-#include <QPainter>
+#include <QDebug>
+#include <QCursor>
 
 Card::Card()
 {
@@ -11,8 +9,8 @@
     setAcceptHoverEvents(true);
     setAcceptedMouseButtons(Qt::LeftButton | Qt::RightButton);
     setPixmap(QPixmap(":/png/png/NULL.jpg"));
-    area = NoArea;
-    type = NoType;
+    area = No_Area;
+    type = No_Type;
     setTransformationMode(Qt::SmoothTransformation);
 }
 
@@ -30,14 +28,9 @@
     testAttack() ? setCardFlag(Card::Attack, true) : setCardFlag(Card::Attack, false);
 }
 
-bool Card::testEffect()
-{
-    return false;
-}
-
 bool Card::testSpecialSummon()
 {
-    if (area != 2)
+    if (area != Hand_Area)
     {
         return false;
     }
@@ -46,42 +39,78 @@
 
 bool Card::testNormalSummon()
 {
-    if (area != 2)
+    if (area != Hand_Area)
     {
         return false;
     }
+
+    if (!Rule::instance()->getDoing() || !face)
+    {
+        return false;
+    }
+
+    //涓€鍥炲悎鍙兘鏅€氬彫鍞や竴娆?     //TODO: 鍚庣画澧炲姞琚叾浠栧崱褰卞搷锛屾棤娉曟櫘閫氬彫鍞ょ殑鍒ゆ柇
-    if (Rule::instance()->getOneTurnOneNormalSummon())
+    if (!Rule::instance()->getOneTurnOneNormalSummon())
     {
+        return false;
+    }
+
+    Rule::Phase phase = Rule::instance()->getphase();
+    if (phase == Rule::myM1 || phase == Rule::myM2)
+    {
         return true;
     }
+
     return false;
 }
 
 bool Card::testSetCard()
 {
-    if (area != 2)
+    if (area != Hand_Area)
     {
         return false;
     }
-    //TODO: 鍚庣画澧炲姞琚叾浠栧崱褰卞搷锛屾棤娉曡鐩栧崱鐗岀殑鍒ゆ柇
-    //鍖呮嫭銆愭€吔銆戝拰銆愰瓟闄枫€戠殑瑕嗙洊
-    if (Rule::instance()->getOneTurnOneNormalSummon())
+
+    if (!Rule::instance()->getDoing() || !face)
     {
+        return false;
+    }
+
+    if (!Rule::instance()->getOneTurnOneNormalSummon())
+    {
+        return false;
+    }
+
+    Rule::Phase phase = Rule::instance()->getphase();
+    if (phase == Rule::myM1 || phase == Rule::myM2)
+    {
         return true;
     }
+
     return false;
 }
 
 bool Card::testFlipSummon()
 {
-    //    if (!face && !stand) //FIXME: 鍚庣画鍙互鍘绘帀stand
-    //    {
-    //        //TODO: 鍚庣画澧炲姞琚叾浠栧崱褰卞搷锛屾棤娉曠炕杞彫鍞ょ殑鍒ゆ柇
-    //        if (Rule::instance()->getOneTurnOneNormalSummon()) {
-    //            return true;
-    //        }
-    //    }
+    if (area != Fieldyard_Area)
+    {
+        return false;
+    }
+
+    //TODO: 鍚庣画澧炲姞琚叾浠栧崱褰卞搷锛屾棤娉曠炕杞彫鍞ょ殑鍒ゆ柇
+    //杩樿娣诲姞涓€涓叧閿殑锛屽垰set鐨勫崱鐗屾棤娉曞綋鍥炲悎flipSummon
+    if (!Rule::instance()->getDoing() || face)
+    {
+        return false;
+    }
+
+    Rule::Phase phase = Rule::instance()->getphase();
+    if (phase == Rule::myM1 || phase == Rule::myM2)
+    {
+        return true;
+    }
+
     return false;
 }
 
@@ -177,10 +206,10 @@
     qDebug() << "hoverEnterEvent: area = " << area;
     switch (area)
     {
-    case 2:
+    case Hand_Area:
         setY(-35);
         break;
-    case 7:
+    case EnemyHand_Area:
         setY(35);
         break;
     default:
@@ -216,7 +245,7 @@
 
 void Card::hoverLeaveEvent(QGraphicsSceneHoverEvent*)
 {
-    if (area == 2 || area == 7)
+    if (area == Hand_Area || area == EnemyHand_Area)
     {
         setY(0);
         setCursor(Qt::ArrowCursor);
@@ -226,6 +255,10 @@
 // 褰撴垜鐐瑰嚮浠绘剰涓€寮犲崱鐗屾椂
 void Card::mousePressEvent(QGraphicsSceneMouseEvent* event)
 {
+    if (myflags == CardFlags())
+    {
+        return;
+    }
     // 鍙抽敭鐐瑰嚮鐨勮瘽锛?鍒囨崲鍒颁笅涓€绉嶉紶鏍囨墜鍔匡紝 鍖呮嫭鍙戝姩鏁堟灉銆佺壒鎷涖€佹櫘鎷涚瓑绛?     if (event->button() == Qt::RightButton)
     {
@@ -294,7 +327,7 @@
     {
         switch (area)
         {
-        case 2:
+        case Hand_Area:
             if (currentflag == NormalSummon)
             {
                 Rule::instance()->setOneTurnOneNormalSummon(false);
@@ -307,8 +340,8 @@
             }
             else if (currentflag == Effect)
             {
-                //鐩墠娌℃湁浠庢墜鐗屽彂鍔ㄧ殑鐗规晥
-                //emit activeEffect();
+                //鐩墠娌℃湁浠庢墜鐗屽彂鍔ㄧ殑鐗规晥锛屽凡缁忔湁浜?+                //                activeEffectFromHand();
             }
             else if (currentflag == SpecialSummon)
             {
@@ -316,16 +349,16 @@
                 //emit specialSummon();
             }
             break;
-        case 3:
+        case Fieldyard_Area:
             if (currentflag == FlipSummon)
             {
                 //鐩墠娌℃湁缈昏浆鍙敜
-                //Rule::instance()->setOneTurnOneNormalSummon(false);
                 //emit flipSummon();
             }
             else if (currentflag == Effect)
             {
-                //emit activeEffect(ISDN,i);
+                setOneTurnOneEffect(false);
+                emit activeEffect();
             }
             break;
         default:
@@ -385,47 +418,36 @@
     int width = pixmap().width();
     int height = pixmap().height();
 
-    setTransformationMode(Qt::SmoothTransformation);
     switch (area)
     {
-    case 1:
-        //DeckArea
+    case Deck_Area:
         setTransform(QTransform::fromScale(50.0 / width, 72.0 / height), false);
         break;
-    case 2:
-        //HandArea
+    case Hand_Area:
         setTransform(QTransform::fromScale(100.0 / width, 145.0 / height), false);
         break;
-    case 3:
-        //FieldyardArea
+    case Fieldyard_Area:
         setTransform(QTransform::fromScale(50.0 / width, 72.0 / height), false);
         break;
-    case 4:
-        //FieldgroundArea
+    case Fieldground_Area:
         setTransform(QTransform::fromScale(50.0 / width, 72.0 / height), false);
         break;
-    case 5:
-        //GraveyardArea
+    case Graveyard_Area:
         setTransform(QTransform::fromScale(50.0 / width, 72.0 / height), false);
         break;
-    case 6:
-        //EnemyDeckArea
+    case EnemyDeck_Area:
         setTransform(QTransform::fromScale(50.0 / width, 72.0 / height), false);
         break;
-    case 7:
-        //EnemyHandArea
+    case EnemyHand_Area:
         setTransform(QTransform::fromScale(100.0 / width, 145.0 / height), false);
         break;
-    case 8:
-        //EnemyFieldyardArea
+    case EnemyFieldyard_Area:
         setTransform(QTransform::fromScale(50.0 / width, 72.0 / height), false);
         break;
-    case 9:
-        //EnemyFieldgroundArea
+    case EnemyFieldground_Area:
         setTransform(QTransform::fromScale(50.0 / width, 72.0 / height), false);
         break;
-    case 10:
-        //EnemyGraveyardArea
+    case EnemyGraveyard_Area:
         setTransform(QTransform::fromScale(50.0 / width, 72.0 / height), false);
         break;
     default:
@@ -465,7 +487,6 @@
     }
     else
     {
-        setTransformationMode(Qt::SmoothTransformation);
         if (face)
         {
             setTransformOriginPoint(290, 415);
@@ -478,164 +499,12 @@
     }
 }
 
-bool Card::getInActive() const
+bool Card::getOneTurnOneEffect() const
 {
-    return inActive;
+    return oneTurnOneEffect;
 }
 
-void Card::setInActive(bool value)
+void Card::setOneTurnOneEffect(bool value)
 {
-    inActive = value;
+    oneTurnOneEffect = value;
 }
-
-///////////////////////////////////////////////////////////
-
-CentaurWarrunner::CentaurWarrunner() //鍗婁汉椹厠闀?-{
-    ISDN = 601;
-    name = "dota-CentaurWarrunner";
-    setPixmap(QPixmap(":/pic/monster/dota-CentaurWarrunner.jpg"));
-    type = EffectMonster;
-    ATK = 1350;
-    DEF = 1800;
-    level = 3;
-    attribute = Earth;
-    description = tr("CentaurWarrunner");
-}
-
-bool CentaurWarrunner::testEffect()
-{
-    Rule::Phase phase = Rule::instance()->getphase();
-
-    if (getArea() == 3 && getFace() && Rule::instance()->getDoing())
-    {
-        /// 鈶犲皢杩欏紶鍗′綔涓虹キ鍝佸彂鍔紝寮哄埗缁撴潫瀵规柟鐨勬垬鏂楅樁娈?-        /// 鑻ヨ繖寮犲崱瑁呭浜嗏€渄ota-璺冲垁鈥漈ODO: 璺冲垁鏈紑鍙戯紝鏆傛椂鍏堜笉鍒ゆ柇鏄惁瑁呭璺冲垁
-        /// 鍒欏彲浠ユ敼涓轰涪寮冧竴寮犳墜鐗屽彂鍔?-        if (phase == Rule::yourBP)
-        {
-            //            prepareActive = 1;
-            return true;
-        }
-
-        /// 鈶′綘鐨勬瘡鍥炲悎涓€娆★紝
-        /// 浣犲彲浠ヨ鑷繁鍦轰笂鍚嶅瓧甯︽湁鈥渄ota鈥濈殑鎬吔鍏ㄩ儴鍙樹负鏀诲嚮琛ㄧず鎴栭槻瀹堣〃绀猴紝
-        /// 鑻ヨ繖寮犲崱瑁呭浜嗏€渄ota-闃垮搱鍒╁绁炴潠鈥濇椂 TODO: 闃垮搱鍒╁绁炴潠鏈紑鍙戯紝鏆傛椂鍏堜笉鍒ゆ柇鏄惁瑁呭闃垮搱鍒╁绁炴潠
-        /// 鍚屾椂浠よ嚜宸卞満涓婂悕瀛楀甫鏈夆€渄ota鈥濈殑鎬吔鐨勬敾鍑诲姏锛堟垨闃插尽鍔涳級涓婂崌鑷繁鍘熸湰鏀诲嚮鍔涳紙鎴栭槻寰″姏锛夌殑涓€鍗娿€?-        if (phase == Rule::myM1 || phase == Rule::myM2)
-        {
-            //            prepareActive = 2;
-            return true;
-        }
-    }
-
-    return false;
-}
-
-KeeperoftheLight::KeeperoftheLight() //鍏変箣瀹堝崼
-{
-    ISDN = 602;
-    name = "dota-KeeperoftheLight";
-    setPixmap(QPixmap(":/pic/monster/dota-KeeperoftheLight.jpg"));
-    type = EffectMonster;
-    ATK = 800;
-    DEF = 300;
-    level = 3;
-    description = tr("KeeperoftheLight");
-}
-
-Lion::Lion() //鎭堕瓟宸笀
-{
-    ISDN = 603;
-    name = "dota-Lion";
-    setPixmap(QPixmap(":/pic/monster/dota-Lion.jpg"));
-    type = EffectMonster;
-    ATK = 1300;
-    DEF = 700;
-    level = 4;
-    description = tr("Lion");
-}
-
-Magnus::Magnus() //鍗婁汉鐚涚姼
-{
-    ISDN = 604;
-    name = "dota-Magnus";
-    setPixmap(QPixmap(":/pic/monster/dota-Magnus.jpg"));
-    type = EffectMonster;
-    ATK = 1700;
-    DEF = 700;
-    level = 4;
-    description = tr("Magnus");
-}
-
-NyxAssassin::NyxAssassin() //鍦扮┐鍒哄
-{
-    ISDN = 605;
-    name = "dota-NyxAssassin";
-    setPixmap(QPixmap(":/pic/monster/dota-NyxAssassin.jpg"));
-    type = EffectMonster;
-    ATK = 1500;
-    DEF = 800;
-    level = 4;
-    description = tr("NyxAssassin");
-}
-
-Rubick::Rubick() //澶ч瓟瀵煎笀
-{
-    ISDN = 606;
-    name = "dota-Rubick";
-    setPixmap(QPixmap(":/pic/monster/dota-Rubick.jpg"));
-    type = EffectMonster;
-    ATK = 900;
-    DEF = 300;
-    level = 4;
-    description = tr("Rubick");
-}
-
-Tusk::Tusk() //宸ㄧ墮娴锋皯
-{
-    ISDN = 607;
-    name = "dota-Tusk";
-    setPixmap(QPixmap(":/pic/monster/dota-Tusk.jpg"));
-    type = EffectMonster;
-    ATK = 1800;
-    DEF = 1000;
-    level = 4;
-    description = tr("Tusk");
-}
-
-Undying::Undying() //涓嶆溄灏哥帇
-{
-    ISDN = 608;
-    name = "dota-Undying";
-    setPixmap(QPixmap(":/pic/monster/dota-Undying.jpg"));
-    type = EffectMonster;
-    ATK = 1100;
-    DEF = 1300;
-    level = 3;
-    description = tr("Undying");
-}
-
-VengefulSpirit::VengefulSpirit() //澶嶄粐涔嬮瓊
-{
-    ISDN = 609;
-    name = "dota-VengefulSpirit";
-    setPixmap(QPixmap(":/pic/monster/dota-VengefulSpirit.jpg"));
-    type = EffectMonster;
-    ATK = 1200;
-    DEF = 500;
-    level = 3;
-    description = tr("VengefulSpirit");
-}
-
-Zeus::Zeus() //濂ユ灄鍖规柉涔嬬帇
-{
-    ISDN = 610;
-    name = "dota-Zeus";
-    setPixmap(QPixmap(":/pic/monster/dota-Zeus.jpg"));
-    type = EffectMonster;
-    ATK = 500;
-    DEF = 350;
-    level = 2;
-    description = tr("Zeus");
-}
Index: card.h
===================================================================
--- card.h	(版本 35)
+++ card.h	(工作副本)
@@ -1,11 +1,22 @@
 #ifndef CARD_H
 #define CARD_H
 
-#include <QGraphicsObject>
-#include <QHash>
-#include <QMouseEvent>
-#include <QCursor>
+#include <QGraphicsPixmapItem>
 
+#define No_Area 0
+#define Deck_Area 1
+#define Hand_Area 2
+#define Fieldyard_Area 3
+#define Fieldground_Area 4
+#define Graveyard_Area 5
+#define EnemyDeck_Area 6
+#define EnemyHand_Area 7
+#define EnemyFieldyard_Area 8
+#define EnemyFieldground_Area 9
+#define EnemyGraveyard_Area 10
+
+#define No_Type 0
+
 class Card : public QObject, public QGraphicsPixmapItem
 {
     Q_OBJECT
@@ -150,7 +161,7 @@
     bool testFlipSummon();
     bool testDefencePosition();
     bool testAttackPosition();
-    virtual bool testEffect();
+    virtual bool testEffect(){return false;}
     bool testAttack();
 
     bool getChangePosition() const;
@@ -159,6 +170,9 @@
     int getIndex() const; //area 闇€瑕佽繖涓嚱鏁?     void setIndex(int value);
 
+    bool getOneTurnOneEffect() const;
+    void setOneTurnOneEffect(bool value);
+
 protected:
     void hoverEnterEvent(QGraphicsSceneHoverEvent*);
     void hoverLeaveEvent(QGraphicsSceneHoverEvent*);
@@ -178,11 +192,11 @@
     int area; //鍗＄墝浣嶇疆锛屾瘮濡傚湪鎵嬩笂鎴栬€呭湪鍓嶅満
     bool face; // 鍗＄墝琛ㄤ晶琛ㄧず鎴栬€呴噷渚ц〃绀?     bool stand; // 鍗＄墝鏀诲嚮琛ㄧず鎴栬€呴槻寰¤〃绀?-    bool inActive; //蹇樿鍋氫粈涔堢殑浜?     CardFlags myflags; //鍙抽敭鍙互鏄剧ず鐨勫叏閮╟ursor
     CardFlag currentflag; //褰撳墠濡傛灉榧犳爣绉讳笂鍘昏鏄剧ず鐨刢ursor
 
     bool changePosition; //姣忓洖鍚堝彲浠ュ彉鏇翠竴娆℃敾闃茶〃绀?+    bool oneTurnOneEffect;
